--- b/Telegram/SourceFiles/platform/linux/integration_linux.cpp
+++ a/Telegram/SourceFiles/platform/linux/integration_linux.cpp
@@ -114,8 +114,8 @@
 	XdpInhibit::InhibitProxy::new_for_bus_sync(
 		Gio::BusType::SESSION_,
 		Gio::DBusProxyFlags::DO_NOT_AUTO_START_AT_CONSTRUCTION_,
+		std::string(base::Platform::XDP::kService),
+		std::string(base::Platform::XDP::kObjectPath),
-		base::Platform::XDP::kService,
-		base::Platform::XDP::kObjectPath,
 		nullptr))
 , _darkModeWatcher([](
 	const Glib::ustring &group,
--- b/Telegram/SourceFiles/platform/linux/linux_xdp_open_with_dialog.cpp
+++ a/Telegram/SourceFiles/platform/linux/linux_xdp_open_with_dialog.cpp
@@ -23,8 +23,8 @@
 namespace internal {
 namespace {
 
+constexpr auto kXDPOpenURIInterface = "org.freedesktop.portal.OpenURI"_cs;
+constexpr auto kPropertiesInterface = "org.freedesktop.DBus.Properties"_cs;
-constexpr auto kXDPOpenURIInterface = "org.freedesktop.portal.OpenURI";
-constexpr auto kPropertiesInterface = "org.freedesktop.DBus.Properties";
 
 } // namespace
 
@@ -34,14 +34,15 @@
 			Gio::DBus::BusType::SESSION);
 
 		const auto version = connection->call_sync(
+			std::string(base::Platform::XDP::kObjectPath),
+			std::string(kPropertiesInterface),
-			base::Platform::XDP::kObjectPath,
-			kPropertiesInterface,
 			"Get",
 			Glib::create_variant(std::tuple{
+				Glib::ustring(
+					std::string(kXDPOpenURIInterface)),
-				Glib::ustring(kXDPOpenURIInterface),
 				Glib::ustring("version"),
 			}),
+			std::string(base::Platform::XDP::kService)
-			base::Platform::XDP::kService
 		).get_child(0).get_dynamic<Glib::Variant<uint>>().get();
 
 		if (version < 3) {
@@ -106,8 +107,8 @@
 				const Glib::VariantContainerBase &parameters) {
 				loop->quit();
 			},
+			std::string(base::Platform::XDP::kService),
+			std::string(base::Platform::XDP::kRequestInterface),
-			base::Platform::XDP::kService,
-			base::Platform::XDP::kRequestInterface,
 			"Response",
 			requestPath);
 
@@ -120,8 +121,8 @@
 		auto outFdList = Glib::RefPtr<Gio::UnixFDList>();
 
 		connection->call_sync(
+			std::string(base::Platform::XDP::kObjectPath),
+			std::string(kXDPOpenURIInterface),
-			base::Platform::XDP::kObjectPath,
-			kXDPOpenURIInterface,
 			"OpenFile",
 			Glib::create_variant(std::tuple{
 				parentWindowId,
@@ -143,7 +144,7 @@
 			}),
 			Gio::UnixFDList::create(std::vector<int>{ fd }),
 			outFdList,
+			std::string(base::Platform::XDP::kService));
-			base::Platform::XDP::kService);
 
 		if (signalId != 0) {
 			QWidget window;
--- b/Telegram/SourceFiles/platform/linux/notifications_manager_linux.cpp
+++ a/Telegram/SourceFiles/platform/linux/notifications_manager_linux.cpp
@@ -37,10 +37,10 @@
 namespace Notifications {
 namespace {
 
+constexpr auto kService = "org.freedesktop.Notifications"_cs;
+constexpr auto kObjectPath = "/org/freedesktop/Notifications"_cs;
-constexpr auto kService = "org.freedesktop.Notifications";
-constexpr auto kObjectPath = "/org/freedesktop/Notifications";
 constexpr auto kInterface = kService;
+constexpr auto kPropertiesInterface = "org.freedesktop.DBus.Properties"_cs;
-constexpr auto kPropertiesInterface = "org.freedesktop.DBus.Properties";
 
 struct ServerInformation {
 	QString name;
@@ -76,7 +76,7 @@
 			try {
 				return ranges::contains(
 					base::Platform::DBus::ListActivatableNames(connection),
+					std::string(kService),
-					kService,
 					&Glib::ustring::raw);
 			} catch (...) {
 				// avoid service restart loop in sandboxed environments
@@ -86,7 +86,7 @@
 
 		return std::make_unique<base::Platform::DBus::ServiceWatcher>(
 			connection,
+			std::string(kService),
-			kService,
 			[=](
 				const Glib::ustring &service,
 				const Glib::ustring &oldOwner,
@@ -115,7 +115,7 @@
 
 		base::Platform::DBus::StartServiceByNameAsync(
 			connection,
+			std::string(kService),
-			kService,
 			[=](Fn<base::Platform::DBus::StartReply()> result) {
 				Noexcept([&] {
 					try {
@@ -155,7 +155,7 @@
 			try {
 				return base::Platform::DBus::NameHasOwner(
 					connection,
+					std::string(kService));
-					kService);
 			} catch (...) {
 				return false;
 			}
@@ -165,7 +165,7 @@
 			try {
 				return ranges::contains(
 					base::Platform::DBus::ListActivatableNames(connection),
+					std::string(kService),
-					kService,
 					&Glib::ustring::raw);
 			} catch (...) {
 				return false;
@@ -186,8 +186,8 @@
 			Gio::DBus::BusType::SESSION);
 
 		connection->call(
+			std::string(kObjectPath),
+			std::string(kInterface),
-			kObjectPath,
-			kInterface,
 			"GetServerInformation",
 			{},
 			[=](const Glib::RefPtr<Gio::AsyncResult> &result) {
@@ -224,7 +224,7 @@
 					crl::on_main([=] { callback(std::nullopt); });
 				});
 			},
+			std::string(kService));
-			kService);
 	}, [&] {
 		crl::on_main([=] { callback(std::nullopt); });
 	});
@@ -236,8 +236,8 @@
 			Gio::DBus::BusType::SESSION);
 
 		connection->call(
+			std::string(kObjectPath),
+			std::string(kInterface),
-			kObjectPath,
-			kInterface,
 			"GetCapabilities",
 			{},
 			[=](const Glib::RefPtr<Gio::AsyncResult> &result) {
@@ -257,7 +257,7 @@
 					crl::on_main([=] { callback({}); });
 				});
 			},
+			std::string(kService));
-			kService);
 	}, [&] {
 		crl::on_main([=] { callback({}); });
 	});
@@ -269,11 +269,11 @@
 			Gio::DBus::BusType::SESSION);
 
 		connection->call(
+			std::string(kObjectPath),
+			std::string(kPropertiesInterface),
-			kObjectPath,
-			kPropertiesInterface,
 			"Get",
 			Glib::create_variant(std::tuple{
+				Glib::ustring(std::string(kInterface)),
-				Glib::ustring(kInterface),
 				Glib::ustring("Inhibited"),
 			}),
 			[=](const Glib::RefPtr<Gio::AsyncResult> &result) {
@@ -290,7 +290,7 @@
 					crl::on_main([=] { callback(false); });
 				});
 			},
+			std::string(kService));
-			kService);
 	}, [&] {
 		crl::on_main([=] { callback(false); });
 	});
@@ -545,25 +545,25 @@
 			_notificationRepliedSignalId =
 				_dbusConnection->signal_subscribe(
 					signalEmitted,
+					std::string(kService),
+					std::string(kInterface),
-					kService,
-					kInterface,
 					"NotificationReplied",
+					std::string(kObjectPath));
-					kObjectPath);
 		}
 
 		_actionInvokedSignalId = _dbusConnection->signal_subscribe(
 			signalEmitted,
+			std::string(kService),
+			std::string(kInterface),
-			kService,
-			kInterface,
 			"ActionInvoked",
+			std::string(kObjectPath));
-			kObjectPath);
 
 		_activationTokenSignalId = _dbusConnection->signal_subscribe(
 			signalEmitted,
+			std::string(kService),
+			std::string(kInterface),
-			kService,
-			kInterface,
 			"ActivationToken",
+			std::string(kObjectPath));
-			kObjectPath);
 	}
 
 	if (capabilities.contains("action-icons")) {
@@ -594,10 +594,10 @@
 
 	_notificationClosedSignalId = _dbusConnection->signal_subscribe(
 		signalEmitted,
+		std::string(kService),
+		std::string(kInterface),
-		kService,
-		kInterface,
 		"NotificationClosed",
+		std::string(kObjectPath));
-		kObjectPath);
 	return true;
 }
 
@@ -643,8 +643,8 @@
 		const auto connection = _dbusConnection;
 
 		connection->call(
+			std::string(kObjectPath),
+			std::string(kInterface),
-			kObjectPath,
-			kInterface,
 			"Notify",
 			Glib::create_variant(std::tuple{
 				Glib::ustring(std::string(AppName)),
@@ -673,7 +673,7 @@
 					});
 				});
 			},
+			std::string(kService));
-			kService);
 	}));
 }
 
@@ -690,14 +690,14 @@
 	}
 
 	_dbusConnection->call(
+		std::string(kObjectPath),
+		std::string(kInterface),
-		kObjectPath,
-		kInterface,
 		"CloseNotification",
 		Glib::create_variant(std::tuple{
 			_notificationId,
 		}),
 		{},
+		std::string(kService),
-		kService,
 		-1,
 		Gio::DBus::CallFlags::NO_AUTO_START);
 	_manager->clearNotification(_id);
@@ -987,7 +987,7 @@
 						0
 					).get_dynamic<Glib::ustring>();
 
+					if (interface != kInterface.data()) {
-					if (interface != kInterface) {
 						return;
 					}
 
@@ -1003,10 +1003,10 @@
 					});
 				});
 			},
+			std::string(kService),
+			std::string(kPropertiesInterface),
-			kService,
-			kPropertiesInterface,
 			"PropertiesChanged",
+			std::string(kObjectPath));
-			kObjectPath);
 	}
 }
 
--- b/Telegram/SourceFiles/platform/linux/specific_linux.cpp
+++ a/Telegram/SourceFiles/platform/linux/specific_linux.cpp
@@ -54,6 +54,8 @@
 namespace Platform {
 namespace {
 
+constexpr auto kDesktopFile = ":/misc/org.telegram.desktop.desktop"_cs;
+
 bool PortalAutostart(bool start, bool silent) {
 	if (cExeName().isEmpty()) {
 		return false;
@@ -136,8 +138,8 @@
 
 				loop->quit();
 			},
+			std::string(base::Platform::XDP::kService),
+			std::string(base::Platform::XDP::kRequestInterface),
-			base::Platform::XDP::kService,
-			base::Platform::XDP::kRequestInterface,
 			"Response",
 			requestPath);
 
@@ -148,14 +150,14 @@
 		});
 
 		connection->call_sync(
+			std::string(base::Platform::XDP::kObjectPath),
-			base::Platform::XDP::kObjectPath,
 			"org.freedesktop.portal.Background",
 			"RequestBackground",
 			Glib::create_variant(std::tuple{
 				parentWindowId,
 				options,
 			}),
+			std::string(base::Platform::XDP::kService));
-			base::Platform::XDP::kService);
 
 		if (signalId != 0) {
 			QWidget window;
@@ -188,7 +190,7 @@
 	DEBUG_LOG(("App Info: placing .desktop file to %1").arg(targetPath));
 	if (!QDir(targetPath).exists()) QDir().mkpath(targetPath);
 
+	const auto sourceFile = kDesktopFile.utf16();
-	const auto sourceFile = u":/misc/org.telegram.desktop.desktop"_q;
 	const auto targetFile = targetPath
 		+ QGuiApplication::desktopFileName()
 		+ u".desktop"_q;
--- b/Telegram/lib_base/base/platform/linux/base_file_utilities_linux.cpp
+++ a/Telegram/lib_base/base/platform/linux/base_file_utilities_linux.cpp
@@ -58,7 +58,7 @@
 		auto outFdList = Glib::RefPtr<Gio::UnixFDList>();
 
 		connection->call_sync(
+			std::string(XDP::kObjectPath),
-			XDP::kObjectPath,
 			"org.freedesktop.portal.OpenURI",
 			"OpenDirectory",
 			Glib::create_variant(std::tuple{
@@ -73,7 +73,7 @@
 			}),
 			Gio::UnixFDList::create(std::vector<int>{ fd }),
 			outFdList,
+			std::string(XDP::kService));
-			XDP::kService);
 
 		return true;
 	} catch (...) {
--- b/Telegram/lib_base/base/platform/linux/base_linux_dbus_utilities.cpp
+++ a/Telegram/lib_base/base/platform/linux/base_linux_dbus_utilities.cpp
@@ -12,22 +12,22 @@
 		const Glib::RefPtr<Gio::DBus::Connection> &connection,
 		const Glib::ustring &name) {
 	return connection->call_sync(
+		std::string(kDBusObjectPath),
+		std::string(kDBusInterface),
-		kObjectPath,
-		kInterface,
 		"NameHasOwner",
 		Glib::create_variant(std::tuple{name}),
+		std::string(kDBusService)
-		kService
 	).get_child(0).get_dynamic<bool>();
 }
 
 std::vector<Glib::ustring> ListActivatableNames(
 		const Glib::RefPtr<Gio::DBus::Connection> &connection) {
 	return connection->call_sync(
+		std::string(kDBusObjectPath),
+		std::string(kDBusInterface),
-		kObjectPath,
-		kInterface,
 		"ListActivatableNames",
 		{},
+		std::string(kDBusService)
-		kService
 	).get_child(0).get_dynamic<std::vector<Glib::ustring>>();
 }
 
@@ -36,11 +36,11 @@
 		const Glib::ustring &name) {
 	return StartReply(
 		connection->call_sync(
+			std::string(kDBusObjectPath),
+			std::string(kDBusInterface),
-			kObjectPath,
-			kInterface,
 			"StartServiceByName",
 			Glib::create_variant(std::tuple{ name, uint(0) }),
+			std::string(kDBusService)
-			kService
 		).get_child(0).get_dynamic<uint>()
 	);
 }
@@ -50,8 +50,8 @@
 		const Glib::ustring &name,
 		Fn<void(Fn<StartReply()>)> callback) {
 	connection->call(
+		std::string(kDBusObjectPath),
+		std::string(kDBusInterface),
-		kObjectPath,
-		kInterface,
 		"StartServiceByName",
 		Glib::create_variant(std::tuple{ name, uint(0) }),
 		[=](const Glib::RefPtr<Gio::AsyncResult> &result) {
@@ -65,7 +65,7 @@
 				);
 			});
 		},
+		std::string(kDBusService));
-		kService);
 }
 
 uint RegisterServiceWatcher(
@@ -104,10 +104,10 @@
 			} catch (...) {
 			}
 		},
+		std::string(kDBusService),
+		std::string(kDBusInterface),
-		kService,
-		kInterface,
 		"NameOwnerChanged",
+		std::string(kDBusObjectPath));
-		kObjectPath);
 }
 
 } // namespace base::Platform::DBus
--- b/Telegram/lib_base/base/platform/linux/base_linux_dbus_utilities.h
+++ a/Telegram/lib_base/base/platform/linux/base_linux_dbus_utilities.h
@@ -7,15 +7,16 @@
 #pragma once
 
 #include "base/basic_types.h"
+#include "base/const_string.h"
 
 #include <glibmm.h>
 #include <giomm.h>
 
 namespace base::Platform::DBus {
 
+inline constexpr auto kDBusService = "org.freedesktop.DBus"_cs;
+inline constexpr auto kDBusObjectPath = "/org/freedesktop/DBus"_cs;
+inline constexpr auto kDBusInterface = kDBusService;
-inline constexpr auto kService = "org.freedesktop.DBus";
-inline constexpr auto kObjectPath = "/org/freedesktop/DBus";
-inline constexpr auto kInterface = kService;
 
 enum class StartReply {
 	Success,
--- b/Telegram/lib_base/base/platform/linux/base_linux_xdp_utilities.h
+++ a/Telegram/lib_base/base/platform/linux/base_linux_xdp_utilities.h
@@ -6,6 +6,8 @@
 //
 #pragma once
 
+#include "base/const_string.h"
+
 namespace Glib {
 class ustring;
 class VariantBase;
@@ -15,10 +17,10 @@
 
 namespace base::Platform::XDP {
 
+inline constexpr auto kService = "org.freedesktop.portal.Desktop"_cs;
+inline constexpr auto kObjectPath = "/org/freedesktop/portal/desktop"_cs;
+inline constexpr auto kRequestInterface = "org.freedesktop.portal.Request"_cs;
+inline constexpr auto kSettingsInterface = "org.freedesktop.portal.Settings"_cs;
-inline constexpr auto kService = "org.freedesktop.portal.Desktop";
-inline constexpr auto kObjectPath = "/org/freedesktop/portal/desktop";
-inline constexpr auto kRequestInterface = "org.freedesktop.portal.Request";
-inline constexpr auto kSettingsInterface = "org.freedesktop.portal.Settings";
 
 Glib::ustring ParentWindowID(QWindow *window);
 
--- b/Telegram/lib_base/base/platform/linux/base_power_save_blocker_linux.cpp
+++ a/Telegram/lib_base/base/platform/linux/base_power_save_blocker_linux.cpp
@@ -61,11 +61,11 @@
 		if (!prevent && !requestPath.empty()) {
 			connection->call(
 				requestPath,
+				std::string(XDP::kRequestInterface),
-				XDP::kRequestInterface,
 				"Close",
 				{},
 				{},
+				std::string(XDP::kService));
-				XDP::kService);
 			requestPath = "";
 			return;
 		} else if (!(prevent && requestPath.empty())) {
@@ -86,7 +86,7 @@
 			+ handleToken;
 
 		connection->call(
+			std::string(XDP::kObjectPath),
-			XDP::kObjectPath,
 			"org.freedesktop.portal.Inhibit",
 			"Inhibit",
 			Glib::create_variant(std::tuple{
@@ -105,7 +105,7 @@
 				},
 			}),
 			{},
+			std::string(XDP::kService));
-			XDP::kService);
 	} catch (...) {
 	}
 }
--- b/Telegram/lib_base/base/platform/linux/base_url_scheme_linux.cpp
+++ a/Telegram/lib_base/base/platform/linux/base_url_scheme_linux.cpp
@@ -6,6 +6,7 @@
 //
 #include "base/platform/linux/base_url_scheme_linux.h"
 
+#include "base/const_string.h"
 #include "base/debug_log.h"
 
 #include <QtGui/QGuiApplication>
@@ -20,8 +21,8 @@
 namespace base::Platform {
 namespace {
 
+constexpr auto kSnapcraftSettingsService = "io.snapcraft.Settings"_cs;
+constexpr auto kSnapcraftSettingsObjectPath = "/io/snapcraft/Settings"_cs;
-constexpr auto kSnapcraftSettingsService = "io.snapcraft.Settings";
-constexpr auto kSnapcraftSettingsObjectPath = "/io/snapcraft/Settings";
 constexpr auto kSnapcraftSettingsInterface = kSnapcraftSettingsService;
 
 void SnapDefaultHandler(const QString &protocol) {
@@ -30,14 +31,14 @@
 			Gio::DBus::BusType::SESSION);
 
 		const auto currentHandler = connection->call_sync(
+			std::string(kSnapcraftSettingsObjectPath),
+			std::string(kSnapcraftSettingsInterface),
-			kSnapcraftSettingsObjectPath,
-			kSnapcraftSettingsInterface,
 			"GetSub",
 			Glib::create_variant(std::tuple{
 				Glib::ustring("default-url-scheme-handler"),
 				Glib::ustring(protocol.toStdString()),
 			}),
+			std::string(kSnapcraftSettingsService)
-			kSnapcraftSettingsService
 		).get_child(0).get_dynamic<Glib::ustring>();
 
 		const auto expectedHandler = qEnvironmentVariable("SNAP_NAME")
@@ -53,8 +54,8 @@
 		window->show();
 
 		connection->call(
+			std::string(kSnapcraftSettingsObjectPath),
+			std::string(kSnapcraftSettingsInterface),
-			kSnapcraftSettingsObjectPath,
-			kSnapcraftSettingsInterface,
 			"SetSub",
 			Glib::create_variant(std::tuple{
 				Glib::ustring("default-url-scheme-handler"),
@@ -70,7 +71,7 @@
 						.arg(QString::fromStdString(e.what())));
 				}
 			},
+			std::string(kSnapcraftSettingsService));
-			kSnapcraftSettingsService);
 	} catch (const std::exception &e) {
 		LOG(("Snap Default Handler Error: %1")
 			.arg(QString::fromStdString(e.what())));
